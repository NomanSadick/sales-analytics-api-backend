// controllers/salesController.js

const Sales = require('../models/salesModel');
const Department = require('../models/departmentModel');

// Create a new department
exports.createDepartment = async (req, res) => {
    try {
        const { name, salaryExpense } = req.body;

        if (!name || !salaryExpense) {
            return res.status(400).json({ message: 'Missing required fields' });
        }

        const newDepartment = await Department.create({ name, salaryExpense });

        res.status(201).json({ message: 'Department created successfully', department: newDepartment });
    } catch (error) {
        res.status(500).json({ message: 'Internal server error' });
    }
};


// Create a new sale
exports.createSale = async (req, res) => {
    try {
        const reqBody = req.body;

        // Check if the required fields are present in the request body
        if (!reqBody.product || !reqBody.quantity || !reqBody.price || !reqBody.date || !reqBody.department) {
            return res.status(400).json({ message: 'Missing required fields' });
        }

        // Calculate salary expense and update the department document
        const salaryExpense = reqBody.quantity * reqBody.price;
        await Department.findByIdAndUpdate(reqBody.department, { $inc: { salaryExpense } });

        // Create a new sale document
        const newSale = await Sales.create(reqBody);

        res.status(201).json({ message: 'Sale created successfully', sale: newSale });
    } catch (error) {
        res.status(500).json({ message: 'Internal server error' });
    }
};

// Calculate and return the total revenue generated by all sales transactions
exports.getTotalRevenue = async (req, res) => {
    try {
        const totalRevenue = await Sales.aggregate([
            {
                $group: {
                    _id: null,
                    total: { $sum: { $multiply: ['$quantity', '$price'] } },
                },
            },
        ]);

        if (totalRevenue.length === 0) {
            res.status(404).json({ message: 'No sales data available' });
        } else {
            res.json({ totalRevenue: totalRevenue[0].total });
        }
    } catch (error) {
        res.status(500).json({ message: 'Internal server error' });
    }
};

// Find and return the total quantity sold for each product
exports.getQuantityByProduct = async (req, res) => {
    try {
        const quantityByProduct = await Sales.aggregate([
            {
                $group: {
                    _id: '$product',
                    totalQuantity: { $sum: '$quantity' },
                },
            },
        ]);

        res.json(quantityByProduct);
    } catch (error) {
        res.status(500).json({ message: 'Internal server error' });
    }
};

// Retrieve the top 5 products with the highest total revenue
exports.getTopProducts = async (req, res) => {
    try {
        const topProducts = await Sales.aggregate([
            {
                $group: {
                    _id: '$product',
                    totalRevenue: { $sum: { $multiply: ['$quantity', '$price'] } },
                },
            },
            { $sort: { totalRevenue: -1 } },
            { $limit: 5 },
        ]);

        res.json(topProducts);
    } catch (error) {
        res.status(500).json({ message: 'Internal server error' });
    }
};

// Calculate and return the average price of products sold
exports.getAveragePrice = async (req, res) => {
    try {
        const averagePrice = await Sales.aggregate([
            {
                $group: {
                    _id: null,
                    average: { $avg: '$price' },
                },
            },
        ]);

        if (averagePrice.length === 0) {
            res.status(404).json({ message: 'No sales data available' });
        } else {
            res.json({ averagePrice: averagePrice[0].average });
        }
    } catch (error) {
        res.status(500).json({ message: 'Internal server error' });
    }
};

// Group the sales data by month and year and calculate the total revenue for each month-year combination
exports.getRevenueByMonth = async (req, res) => {
    try {
        const revenueByMonth = await Sales.aggregate([
            {
                $group: {
                    _id: {
                        year: { $year: '$date' },
                        month: { $month: '$date' },
                    },
                    totalRevenue: { $sum: { $multiply: ['$quantity', '$price'] } },
                },
            },
            {
                $project: {
                    _id: 0,
                    year: '$_id.year',
                    month: '$_id.month',
                    totalRevenue: 1,
                },
            },
            { $sort: { year: 1, month: 1 } },
        ]);

        res.json(revenueByMonth);
    } catch (error) {
        res.status(500).json({ message: 'Internal server error' });
    }
};

// Find and return the product that had the highest quantity sold on a single day
exports.getHighestQuantitySold = async (req, res) => {
    try {
        const highestQuantitySold = await Sales.aggregate([
            {
                $group: {
                    _id: {
                        product: '$product',
                        date: { $dateToString: { format: '%Y-%m-%d', date: '$date' } },
                    },
                    totalQuantity: { $sum: '$quantity' },
                },
            },
            { $sort: { totalQuantity: -1 } },
            { $limit: 1 },
        ]);

        res.json(highestQuantitySold[0]);
    } catch (error) {
        res.status(500).json({ message: 'Internal server error' });
    }
};

// Calculate and return the total salary expense for each department
exports.getDepartmentSalaryExpense = async (req, res) => {
    try {
        const departmentSalaryExpenses = await Sales.aggregate([
            {
                $group: {
                    _id: { department: '$department', type: 'salaryExpense' },
                    totalSalaryExpense: { $sum: { $multiply: ['$quantity', '$price'] } },
                },
            },
        ]);

        const populatedData = await Department.populate(departmentSalaryExpenses, { path: '_id.department', select: 'name' });

        res.json(populatedData);
    } catch (error) {
        res.status(500).json({ message: 'Internal server error' });
    }
};
